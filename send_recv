% team: Isabel Lopez Murillo and Caitlyn Kim
-module(send_recv).
-export([start/0, loop/1, serv1/1, serv2/1, serv3/1]).

% start function initializes processes and starts user input loop
start() ->
    io:format("Enter message (or 'all_done' to stop): "),
    Serv3 = spawn(?MODULE, serv3, [0]),
    Serv2 = spawn(?MODULE, serv2, [Serv3]),
    Serv1 = spawn(?MODULE, serv1, [Serv2]),
    loop(Serv1).

% loop continuously takes user input and sends messages to serv1
loop(Serv1) ->
    case io:read("") of
        {ok, all_done} ->
            io:format("Shutting down...\n"),
            Serv1 ! halt;
        {ok, Msg} when is_tuple(Msg); is_list(Msg) -> 
            Serv1 ! Msg, 
            loop(Serv1);
        {ok, halt} ->
            Serv1 ! halt;
        {ok, Other} ->  
            io:format("Forwarding unexpected input: ~p~n", [Other]),
            Serv1 ! Other,
            loop(Serv1);
        {error, _} ->  
            io:format("Invalid input. Forwarding as unhandled.\n"),
            Serv1 ! {error, "Invalid input"},
            loop(Serv1)
    end.

% serv1 handles arithmetic operations and forwards unhandled messages to serv2
serv1(Pid2) -> receive
    {add, X, Y} ->
        io:format("(serv1) Output: ~p + ~p = ~p~n", [X, Y, X+Y]),
        serv1(Pid2);
    {sub, X, Y} ->
        io:format("(serv1) Output: ~p - ~p = ~p~n", [X, Y, X-Y]),
        serv1(Pid2);
    {mult, X, Y} ->
        io:format("(serv1) Output: ~p * ~p = ~p~n", [X, Y, X*Y]),
        serv1(Pid2);
    {divide, X, Y} ->
        io:format("(serv1) Output: ~p / ~p = ~p~n", [X, Y, X/Y]),
        serv1(Pid2);
    {neg, X} ->
        io:format("(serv1) Negation Output: ~p~n", [-X]),
        serv1(Pid2);
    {sqrt, X} when X >= 0 ->
        Result = math:sqrt(X),
        io:format("(serv1) Square Root Output: sqrt(~p) = ~p~n", [X, Result]),
        serv1(Pid2);
    halt -> 
        Pid2 ! halt, 
        io:format("(serv1) Halting...\n");
    Other ->  
        Pid2 ! Other,
        serv1(Pid2)
end.

% serv2 processes lists and forwards unhandled messages to serv3
serv2(Pid3) -> receive
    [H | T] when is_integer(H) ->
        Sum = lists:sum([X || X <- [H | T], is_number(X)]),
        io:format("(serv2) Sum Output:: ~p~n", [Sum]),
        serv2(Pid3);
    [H | T] when is_float(H) ->
        Product = lists:foldl(fun(X, Acc) when is_number(X) -> X * Acc; (_, Acc) -> Acc end, 1, [H | T]),
        io:format("(serv2) Product Output: ~p~n", [Product]),
        serv2(Pid3);
    halt ->
        Pid3 ! halt,  
        io:format("(serv2) Halting...\n");
    Other ->
        Pid3 ! Other,
        serv2(Pid3)
end.

% serv3 handles errors and keeps count of unprocessed messages
serv3(Count) -> receive
    {error, Msg} ->
        io:format("(serv3) Error: ~p~n", [Msg]),
        serv3(Count);
    halt ->
        io:format("(serv3) Halting. Unhandled messages count: ~p~n", [Count]);  % prints count before halting
    Other ->
        io:format("(serv3) Not handled: ~p~n", [Other]),
        serv3(Count + 1)
end.
